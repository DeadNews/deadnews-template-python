name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: poetry

      - name: Install dependencies
        run: |
          poetry env use ${{ env.PYTHON_VERSION }}
          poetry install --only main,ci

      - name: Check code quality
        run: poetry run poe ci

  run-tests:
    name: Run tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup poetry runtime
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements-ci.txt

      - name: Cache poetry runtime
        id: cache-runtime
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-ci.txt') }}

      - name: Install poetry
        if: steps.cache-runtime.outputs.cache-hit != 'true'
        run: pip install -r requirements-ci.txt

      - name: Setup/Cache dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install dependencies
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry install --only main,test

      - name: Run tests
        run: poetry run pytest --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3

  publish-pypi:
    name: Build and release to PyPI
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [code-quality, run-tests]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: |
          pipx install poetry
          poetry self add poetry-dynamic-versioning[plugin]

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: poetry build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
